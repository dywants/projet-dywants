// // Fonction Couleurs Categories
// @each $item in $colors_categories {
//   $i: index($colors_categories, $item);

//   .container>*:nth-of-type(#{$i}) {
//     padding: 1rem 2rem;
//     background: $item;
//   }
// }

// fonction typographie
@function rwd-generate-font-size($label, $breakpoint) {
  $label-position: index($rwd-scale-labels, $label);
  $breakpoint-base-font-size: map-get(map-get($rwd-typography, $breakpoint), base-font-size);
  $breakpoint-type-scale: map-get(map-get($rwd-typography, $breakpoint), type-scale);
  $breakpoint-vertical-rhythm: map-get(map-get($rwd-typography, $breakpoint), vertical-rhythm);
  $font-size: $breakpoint-base-font-size;

  @for $i from 1 to $label-position {
    $font-size: $font-size * $breakpoint-type-scale;
  }

  $base-vertical-rhythm: $breakpoint-base-font-size * $breakpoint-vertical-rhythm;
  $line-height: round($font-size / $base-vertical-rhythm) * $base-vertical-rhythm / $font-size;
  $return: join($font-size, $line-height);
  @return $return;
}

@each $label in $rwd-scale-labels {
  %#{$label} {

    @each $breakpoint,
    $data in $rwd-typography {
      $generated-values: rwd-generate-font-size($label, $breakpoint);
      $font-size: round(nth($generated-values, 1)*10)/10;
      $line-height: round(nth($generated-values, 2)*100)/100;

      @if map-get($data, min-width) !=null {
        @media screen and (min-width: map-get($data, min-width)) {
          font-size: $font-size;
          line-height: $line-height;
        }
      }

      @else {
        font-size: $font-size;
        line-height: $line-height;
      }
    }
  }
}